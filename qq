[1mdiff --git a/TABLITSA.CPP b/TABLITSA.CPP[m
[1mindex b5822eb..1cdf883 100644[m
[1m--- a/TABLITSA.CPP[m
[1m+++ b/TABLITSA.CPP[m
[36m@@ -424,18 +424,13 @@[m [mTablitsa::Tablitsa(const InstanceInfo& info)[m
   GetParam(kParamFilter2Delay)->InitInt("Filter 2 Delay", 8, 1, 512);[m
 [m
   // Effect Parameters[m
[31m-  GetParam(kParamEffect1Param1)->InitDouble("Stereo Delay Time L (ms)", 100., 1., 5000., 1., "ms", IParam::kFlagsNone, "Delay", IParam::ShapePowCurve(3.));[m
[31m-  GetParam(kParamEffect1Param2)->InitDouble("Stereo Delay Time R (ms)", 100., 1., 5000., 1., "ms", IParam::kFlagsNone, "Delay", IParam::ShapePowCurve(3.));[m
[31m-  GetParam(kParamEffect1Param3)->InitPercentage("Delay Feedback");[m
[31m-  GetParam(kParamEffect1Param4)->InitPercentage("Delay Mix", 0.);[m
[31m-  GetParam(kParamEffect1Param5)->InitBool("Delay Tempo Sync", false);[m
[31m-  //GetParam(kParamDelayTimeLBeats)->InitEnum("Stereo Delay Time L (tempo)", LFO<>::k8th, { DELAY_TEMPODIV_VALIST });[m
[31m-  //GetParam(kParamDelayTimeRBeats)->InitEnum("Stereo Delay Time R (tempo)", LFO<>::k8th, { DELAY_TEMPODIV_VALIST });[m
[31m-[m
[31m-  GetParam(kParamEffect2Param1)->InitDouble("Sample-and-Hold Sample Rate", 100., 1., 5000., 1., "ms", IParam::kFlagsNone, "SaH", IParam::ShapePowCurve(3.));[m
[31m-  GetParam(kParamEffect2Param2)->InitPercentage("Sample-and-Hold Decay", 0.);[m
[31m-  GetParam(kParamEffect2Param3)->InitPercentage("Sample-and-Hold Noise");[m
[31m-  GetParam(kParamEffect2Param4)->InitPercentage("Sample-and-Hold Mix", 0.);[m
[32m+[m[32m  GetParam(kParamDelayTimeLMilliseconds)->InitDouble("Stereo Delay Time L (ms)", 100., 1., 5000., 1., "ms", IParam::kFlagsNone, "Delay", IParam::ShapePowCurve(3.));[m
[32m+[m[32m  GetParam(kParamDelayTimeRMilliseconds)->InitDouble("Stereo Delay Time R (ms)", 100., 1., 5000., 1., "ms", IParam::kFlagsNone, "Delay", IParam::ShapePowCurve(3.));[m
[32m+[m[32m  GetParam(kParamDelayTimeLBeats)->InitEnum("Stereo Delay Time L (tempo)", LFO<>::k8th, { DELAY_TEMPODIV_VALIST });[m
[32m+[m[32m  GetParam(kParamDelayTimeRBeats)->InitEnum("Stereo Delay Time R (tempo)", LFO<>::k8th, { DELAY_TEMPODIV_VALIST });[m
[32m+[m[32m  GetParam(kParamDelayTimeMode)->InitBool("Delay Tempo Sync", false);[m
[32m+[m[32m  GetParam(kParamDelayFeedback)->InitPercentage("Delay Feedback");[m
[32m+[m[32m  GetParam(kParamDelayMix)->InitPercentage("Delay Mix", 0.);[m
 [m
 #if VST3_API[m
 #define KEYBOARD_HEIGHT 0.f[m
[36m@@ -587,121 +582,54 @@[m [mTablitsa::Tablitsa(const InstanceInfo& info)[m
     const IRECT effectsPanel = IRECT(masterPanel.GetGridCell(1, 1, 2, 7).R, masterPanel.GetGridCell(1, 0, 2, 7).T, masterPanel.GetGridCell(1, 6, 2, 7).R, masterPanel.GetGridCell(1, 6, 2, 7).B).GetHPadded(-5.f).GetHShifted(2.f);[m
 [m
     // Effects tab control[m
[31m-    pGraphics->AttachControl(new TablitsaEffectBankControl(effectsPanel, { "Effect 1", "Effect1", "Effect3" }, { "E1", "E2", "E3" }), kCtrlTagEffectBank, "Effects");[m
[32m+[m[32m    pGraphics->AttachControl(new TablitsaEffectBankControl(effectsPanel, { "Effect 1", "Effect1", "Effect3" }, { "Delay", "S&H", "E3" }), kCtrlTagEffectBank, "Effects");[m
     // Delay[m
     auto channelLockFunction = IActionFunction([pGraphics, this](IControl* pControl) {[m
[31m-      // Tag of the other channel's control[m
[31m-      int ctrlTag = pControl->GetTag() == kCtrlTagEffect1Knob1 || pControl->GetTag() == kCtrlTagEffect1Knob1 ? pControl->GetTag() + 1 : pControl->GetTag() - 1;[m
[32m+[m[32m      int ctrlTag = pControl->GetTag() == kCtrlTagDelayLMilliseconds || pControl->GetTag() == kCtrlTagDelayLBeats ? pControl->GetTag() + 1 : pControl->GetTag() - 1;[m
       pGraphics->GetControlWithTag(ctrlTag)->SetValue(pControl->GetValue());[m
       GetUI()->GetDelegate()->SendParameterValueFromUI(pGraphics->GetControlWithTag(ctrlTag)->GetParamIdx(), pControl->GetValue());[m
       pGraphics->GetControlWithTag(ctrlTag)->SetDirty(false);[m
       });[m
[31m-    pGraphics->AttachControl(new DropdownListControl(effectsPanel.FracRectHorizontal(0.4, false).GetFromTop(40.f).GetReducedFromTop(20.f).GetPadded(-2.f), TABLITSA_EFFECTS_LIST), kCtrlTagEffect1Tab, "E1")->SetActionFunction([m
[31m-      [pGraphics, this](IControl* pControl) {[m
[31m-        // Swap out effect parameters (and rearrange controls if necessary)[m
[31m-        int effectIdx = dynamic_cast<DropdownListControl*>(pControl)->GetCurrentIndex();[m
[31m-        IControl* knob1 = pGraphics->GetControlWithTag(kCtrlTagEffect1Knob1);[m
[31m-        IControl* knob2 = pGraphics->GetControlWithTag(kCtrlTagEffect1Knob2);[m
[31m-        IControl* knob3 = pGraphics->GetControlWithTag(kCtrlTagEffect1Knob3);[m
[31m-        IControl* knob4 = pGraphics->GetControlWithTag(kCtrlTagEffect1Knob4);[m
[31m-        IControl* toggle1 = pGraphics->GetControlWithTag(kCtrlTagEffect1Toggle1);[m
[31m-        IControl* toggle2 = pGraphics->GetControlWithTag(kCtrlTagEffect1Toggle2);[m
[31m-        switch (effectIdx)[m
[31m-        {[m
[31m-        case 0:[m
[31m-        {[m
[31m-          GetParam(kParamEffect1Param1)->InitDouble("Stereo Delay Time L (ms)", 100., 1., 5000., 1., "ms", IParam::kFlagsNone, "Delay", IParam::ShapePowCurve(3.));[m
[31m-          GetParam(kParamEffect1Param2)->InitDouble("Stereo Delay Time R (ms)", 100., 1., 5000., 1., "ms", IParam::kFlagsNone, "Delay", IParam::ShapePowCurve(3.));[m
[31m-          GetParam(kParamEffect1Param3)->InitPercentage("Delay Feedback");[m
[31m-          GetParam(kParamEffect1Param4)->InitPercentage("Delay Mix", 0.);[m
[31m-          GetParam(kParamEffect1Param5)->InitBool("Delay Tempo Sync", false);[m
[31m-          pGraphics->HideControl(kParamEffect1Param5, false);[m
[31m-          pGraphics->HideControl(kParamEffect1Param6, true);[m
[31m-          dynamic_cast<IVKnobControl*>(knob3)->SetLabelStr("L");[m
[31m-          dynamic_cast<IVKnobControl*>(knob3)->SetLabelStr("R");[m
[31m-          dynamic_cast<IVKnobControl*>(knob3)->SetLabelStr("Feedback");[m
[31m-          toggle1->Hide(false);[m
[31m-          toggle2->Hide(false);[m
[31m-          knob1->SetDisabled(false);[m
[31m-          knob2->SetDisabled(false);[m
[31m-          knob3->SetDisabled(false);[m
[31m-          knob4->SetDisabled(false);[m
[31m-          break;[m
[31m-        }[m
[31m-        case 1:[m
[31m-        {[m
[31m-          // Sample-and-Hold Parameter definitions (only here)[m
[31m-          GetParam(kParamEffect1Param1)->InitDouble("Sample-and-Hold Sample Rate", 100., 1., 5000., 1., "ms", IParam::kFlagsNone, "SaH", IParam::ShapePowCurve(3.));[m
[31m-          GetParam(kParamEffect1Param2)->InitPercentage("Sample-and-Hold Decay", 0.);[m
[31m-          GetParam(kParamEffect1Param3)->InitPercentage("Sample-and-Hold Noise");[m
[31m-          GetParam(kParamEffect1Param4)->InitPercentage("Sample-and-Hold Mix", 0.);[m
[31m-          pGraphics->HideControl(kParamEffect1Param5, true);[m
[31m-          pGraphics->HideControl(kParamEffect1Param6, true);[m
[31m-          dynamic_cast<IVKnobControl*>(knob1)->SetLabelStr("Rate");[m
[31m-          dynamic_cast<IVKnobControl*>(knob2)->SetLabelStr("Decay");[m
[31m-          dynamic_cast<IVKnobControl*>(knob3)->SetLabelStr("Noise");[m
[31m-          toggle1->Hide(true);[m
[31m-          toggle2->Hide(true);[m
[31m-          knob1->SetDisabled(false);[m
[31m-          knob2->SetDisabled(false);[m
[31m-          knob3->SetDisabled(false);[m
[31m-          knob4->SetDisabled(false);[m
[31m-          break;[m
[31m-        }[m
[31m-        default:[m
[31m-        {[m
[31m-          dynamic_cast<IVKnobControl*>(knob1)->SetLabelStr("");[m
[31m-          dynamic_cast<IVKnobControl*>(knob2)->SetLabelStr("");[m
[31m-          dynamic_cast<IVKnobControl*>(knob3)->SetLabelStr("");[m
[31m-          knob1->SetDisabled(true);[m
[31m-          knob2->SetDisabled(true);[m
[31m-          knob3->SetDisabled(true);[m
[31m-          knob4->SetDisabled(true);[m
[31m-        }[m
[31m-        }[m
[31m-        knob1->SetDirty(true);[m
[31m-        knob2->SetDirty(true);[m
[31m-        knob3->SetDirty(true);[m
[31m-        knob4->SetDirty(true);[m
[31m-        toggle1->SetDirty(true);[m
[31m-        toggle2->SetDirty(true);[m
[32m+[m[32m    pGraphics->AttachControl(new DropdownListControl(effectsPanel.FracRectHorizontal(0.4, false).GetFromTop(40.f).GetReducedFromTop(20.f).GetPadded(-2.f), TABLITSA_EFFECTS_LIST), kCtrlTagEffect1Tab)->SetActionFunction([m
[32m+[m[32m      [pGraphics](IControl* pControl) {[m
[32m+[m[32m        dynamic_cast<TablitsaEffectBankControl*>(pGraphics->GetControlWithTag(kCtrlTagEffectBank))->SetTabGroup(0, dynamic_cast<DropdownListControl*>(pControl)->GetSelectedGroupName());[m
       }[m
     );[m
     const IRECT effectsControlsPanel = effectsPanel.GetReducedFromTop(40.f);[m
[31m-    pGraphics->AttachControl(new TablitsaIVKnobControl(effectsControlsPanel.FracRectVertical(2.f / 3, true).GetGridCell(0, 0, 1, 4).GetCentredInside(dialSize), kParamEffect1Param1, "Left", modKnobStyle), kCtrlTagEffect1Knob1, "E1");[m
[31m-    pGraphics->AttachControl(new TablitsaIVKnobControl(effectsControlsPanel.FracRectVertical(2.f / 3, true).GetGridCell(0, 1, 1, 4).GetCentredInside(dialSize), kParamEffect1Param2, "Right", modKnobStyle), kCtrlTagEffect1Knob2, "E1");[m
[31m-    pGraphics->AttachControl(new TablitsaIVKnobControl(effectsControlsPanel.FracRectVertical(2.f / 3, true).GetGridCell(0, 2, 1, 4).GetCentredInside(dialSize), kParamEffect1Param3, "Feedback", modKnobStyle), kCtrlTagEffect1Knob3, "E1");[m
[31m-    pGraphics->AttachControl(new TablitsaIVKnobControl(effectsControlsPanel.FracRectVertical(2.f / 3, true).GetGridCell(0, 3, 1, 4).GetCentredInside(dialSize), kParamEffect1Param4, "Mix", modKnobStyle), kCtrlTagEffect1Knob4, "E1");[m
[31m-    pGraphics->AttachControl(new IVToggleControl(effectsControlsPanel.FracRectVertical(1.f / 3).GetGridCell(0,  1, 1, 4).GetPadded(-10.f), kParamEffect1Param5, "", toggleStyle, "Time", "Tempo"),[m
[31m-      kCtrlTagEffect1Toggle1, "E1")->SetActionFunction([m
[32m+[m[32m    pGraphics->AttachControl(new TablitsaIVKnobControl(effectsControlsPanel.FracRectVertical(2.f / 3, true).GetGridCell(0, 0, 1, 4).GetCentredInside(dialSize), kParamDelayTimeLMilliseconds, "Left", modKnobStyle), kCtrlTagDelayLMilliseconds, "Delay");[m
[32m+[m[32m    pGraphics->AttachControl(new TablitsaIVKnobControl(effectsControlsPanel.FracRectVertical(2.f / 3, true).GetGridCell(0, 1, 1, 4).GetCentredInside(dialSize), kParamDelayTimeRMilliseconds, "Right", modKnobStyle), kCtrlTagDelayRMilliseconds, "Delay");[m
[32m+[m[32m    pGraphics->AttachControl(new TablitsaIVKnobControl(effectsControlsPanel.FracRectVertical(2.f / 3, true).GetGridCell(0, 0, 1, 4).GetCentredInside(dialSize), kParamDelayTimeLBeats, "Left", modKnobStyle), kCtrlTagDelayLBeats, "Delay")->Hide(true);[m
[32m+[m[32m    pGraphics->AttachControl(new TablitsaIVKnobControl(effectsControlsPanel.FracRectVertical(2.f / 3, true).GetGridCell(0, 1, 1, 4).GetCentredInside(dialSize), kParamDelayTimeRBeats, "Right", modKnobStyle), kCtrlTagDelayRBeats, "Delay")->Hide(true);[m
[32m+[m[32m    pGraphics->AttachControl(new TablitsaIVKnobControl(effectsControlsPanel.FracRectVertical(2.f / 3, true).GetGridCell(0, 2, 1, 4).GetCentredInside(dialSize), kParamDelayFeedback, "Feedback", modKnobStyle), kNoTag, "Delay");[m
[32m+[m[32m    pGraphics->AttachControl(new TablitsaIVKnobControl(effectsControlsPanel.FracRectVertical(2.f / 3, true).GetGridCell(0, 3, 1, 4).GetCentredInside(dialSize), kParamDelayMix, "Mix", modKnobStyle), kNoTag, "Delay");[m
[32m+[m[32m    pGraphics->AttachControl(new IVToggleControl(effectsControlsPanel.FracRectVertical(1.f / 3).GetGridCell(0,  1, 1, 4).GetPadded(-10.f), kParamDelayTimeMode, "", toggleStyle, "Time", "Tempo"),[m
[32m+[m[32m      kCtrlTagDelayTempoSync, "Delay")->SetActionFunction([m
       [pGraphics, this](IControl* pControl) {[m
         mDelayIsSynced = pControl->GetValue();[m
         bool isTempoSync = mDelayIsSynced > 0.5;[m
[31m-        if (isTempoSync)[m
[31m-        {[m
[31m-          GetParam(kParamEffect1Param1)->InitEnum("Stereo Delay Time L (tempo)", LFO<>::k8th, { DELAY_TEMPODIV_VALIST });[m
[31m-          GetParam(kParamEffect1Param2)->InitEnum("Stereo Delay Time R (tempo)", LFO<>::k8th, { DELAY_TEMPODIV_VALIST });[m
[31m-        }[m
[31m-        else[m
[31m-        {[m
[31m-          GetParam(kParamEffect1Param1)->InitDouble("Stereo Delay Time L (ms)", 100., 1., 5000., 1., "ms", IParam::kFlagsNone, "Delay", IParam::ShapePowCurve(3.));[m
[31m-          GetParam(kParamEffect1Param2)->InitDouble("Stereo Delay Time R (ms)", 100., 1., 5000., 1., "ms", IParam::kFlagsNone, "Delay", IParam::ShapePowCurve(3.));[m
[31m-        }[m
[32m+[m[32m        pGraphics->HideControl(kParamDelayTimeLMilliseconds, isTempoSync);[m
[32m+[m[32m        pGraphics->HideControl(kParamDelayTimeRMilliseconds, isTempoSync);[m
[32m+[m[32m        pGraphics->HideControl(kParamDelayTimeLBeats, !isTempoSync);[m
[32m+[m[32m        pGraphics->HideControl(kParamDelayTimeRBeats, !isTempoSync);[m
         pGraphics->SetAllControlsDirty();[m
       }[m
     );[m
[31m-    pGraphics->AttachControl(new IVToggleControl(effectsControlsPanel.FracRectVertical(1.f / 3).GetGridCell(0, 2, 1, 4).GetPadded(-10.f), kNoParameter, "", toggleStyle, "Stereo", "Mono"), kCtrlTagEffect1Toggle2, "E1")->SetActionFunction([m
[32m+[m[32m    pGraphics->AttachControl(new IVToggleControl(effectsControlsPanel.FracRectVertical(1.f / 3).GetGridCell(0, 2, 1, 4).GetPadded(-10.f), kNoParameter, "", toggleStyle, "Stereo", "Mono"), kNoTag, "Delay")->SetActionFunction([m
       [pGraphics, channelLockFunction](IControl* pControl) {[m
         bool mono = pControl->GetValue() > 0.5;[m
         if (mono)[m
         {[m
[31m-          pGraphics->GetControlWithTag(kCtrlTagEffect1Knob1)->SetActionFunction(channelLockFunction);[m
[31m-          pGraphics->GetControlWithTag(kCtrlTagEffect1Knob2)->SetActionFunction(channelLockFunction);[m
[32m+[m[32m          pGraphics->GetControlWithTag(kCtrlTagDelayLMilliseconds)->SetActionFunction(channelLockFunction);[m
[32m+[m[32m          pGraphics->GetControlWithTag(kCtrlTagDelayRMilliseconds)->SetActionFunction(channelLockFunction);[m
[32m+[m[32m          pGraphics->GetControlWithTag(kCtrlTagDelayLBeats)->SetActionFunction(channelLockFunction);[m
[32m+[m[32m          pGraphics->GetControlWithTag(kCtrlTagDelayRBeats)->SetActionFunction(channelLockFunction);[m
         }[m
         else[m
         {[m
[31m-          pGraphics->GetControlWithTag(kCtrlTagEffect1Knob1)->SetActionFunction([pGraphics](IControl* pControl) {});[m
[31m-          pGraphics->GetControlWithTag(kCtrlTagEffect1Knob2)->SetActionFunction([pGraphics](IControl* pControl) {});[m
[32m+[m[32m          pGraphics->GetControlWithTag(kCtrlTagDelayLMilliseconds)->SetActionFunction([pGraphics](IControl* pControl) {});[m
[32m+[m[32m          pGraphics->GetControlWithTag(kCtrlTagDelayRMilliseconds)->SetActionFunction([pGraphics](IControl* pControl) {});[m
[32m+[m[32m          pGraphics->GetControlWithTag(kCtrlTagDelayLBeats)->SetActionFunction([pGraphics](IControl* pControl) {});[m
[32m+[m[32m          pGraphics->GetControlWithTag(kCtrlTagDelayRBeats)->SetActionFunction([pGraphics](IControl* pControl) {});[m
         }[m
         pGraphics->SetAllControlsDirty();[m
       }[m
[36m@@ -1129,12 +1057,8 @@[m [mvoid Tablitsa::UpdateUIControls()[m
   GetUI()->GetControlWithTag(kCtrlTagFilter1Type)->SetDirty(true);[m
   GetUI()->GetControlWithTag(kCtrlTagFilter2Type)->SetDirty(true);[m
   GetUI()->GetControlWithTag(kCtrlTagGlideMode)->SetDirty(true);*/[m
[31m-  for (auto i{ 0 }; i < std::size(kStartupTriggerControls); ++i)[m
[31m-  {[m
[31m-    IControl* pControl = GetUI()->GetControlWithTag(kStartupTriggerControls[i]);[m
[31m-    if (!pControl->IsHidden())[m
[31m-      pControl->SetDirty(true);[m
[31m-  }[m
[32m+[m[32m  for (auto i{0}; i < std::size(kStartupTriggerControls); ++i)[m
[32m+[m[32m    GetUI()->GetControlWithTag(kStartupTriggerControls[i])->SetDirty(true);[m
 }[m
 [m
 #if IPLUG_DSP[m
[1mdiff --git a/Tablitsa.h b/Tablitsa.h[m
[1mindex d4510e6..eaba5be 100644[m
[1m--- a/Tablitsa.h[m
[1m+++ b/Tablitsa.h[m
[36m@@ -394,18 +394,17 @@[m [menum EParams[m
   kParamRingModAmountVel,[m
   kParamRingModAmountKTk,[m
   kParamRingModAmountRnd, // !Ring Mod[m
[31m-  kParamEffect1Param1, // Effects[m
[31m-  kParamEffect1Param2,[m
[31m-  kParamEffect1Param3,[m
[31m-  kParamEffect1Param4,[m
[31m-  kParamEffect1Param5,[m
[31m-  kParamEffect1Param6,[m
[31m-  kParamEffect2Param1,[m
[31m-  kParamEffect2Param2,[m
[31m-  kParamEffect2Param3,[m
[31m-  kParamEffect2Param4,[m
[31m-  kParamEffect2Param5,[m
[31m-  kParamEffect2Param6,[m
[32m+[m[32m  kParamDelayTimeLMilliseconds, // Delay[m
[32m+[m[32m  kParamDelayTimeRMilliseconds,[m
[32m+[m[32m  kParamDelayTimeLBeats,[m
[32m+[m[32m  kParamDelayTimeRBeats,[m
[32m+[m[32m  kParamDelayTimeMode,[m
[32m+[m[32m  kParamDelayFeedback,[m
[32m+[m[32m  kParamDelayMix, // !Delay[m
[32m+[m[32m  kParamSampleAndHold, // Sample-and-Hold[m
[32m+[m[32m  kParamSaHRate,[m
[32m+[m[32m  kParamSaHDecay,[m
[32m+[m[32m  kParamSaHMix, // !Sample-and-Hold[m
   kNumParams[m
 };[m
 [m
[36m@@ -463,12 +462,11 @@[m [menum EControlTags[m
   kCtrlTagSequencer,[m
   kCtrlTagEffectBank,[m
   kCtrlTagEffect1Tab,[m
[31m-  kCtrlTagEffect1Knob1,[m
[31m-  kCtrlTagEffect1Knob2,[m
[31m-  kCtrlTagEffect1Knob3,[m
[31m-  kCtrlTagEffect1Knob4,[m
[31m-  kCtrlTagEffect1Toggle1,[m
[31m-  kCtrlTagEffect1Toggle2,[m
[32m+[m[32m  kCtrlTagDelayLMilliseconds,[m
[32m+[m[32m  kCtrlTagDelayRMilliseconds,[m
[32m+[m[32m  kCtrlTagDelayLBeats,[m
[32m+[m[32m  kCtrlTagDelayRBeats,[m
[32m+[m[32m  kCtrlTagDelayTempoSync,[m
   kNumCtrlTags[m
 };[m
 [m
[36m@@ -505,7 +503,7 @@[m [mconstexpr EControlTags kStartupTriggerControls[]{[m
   kCtrlTagFilter1Type,[m
   kCtrlTagFilter2Type,[m
   kCtrlTagGlideMode,[m
[31m-  kCtrlTagEffect1Toggle1[m
[32m+[m[32m  kCtrlTagDelayTempoSync[m
 };[m
 [m
 using namespace iplug;[m
[1mdiff --git a/TablitsaControls.cpp b/TablitsaControls.cpp[m
[1mindex f6a9378..5a686b4 100644[m
[1m--- a/TablitsaControls.cpp[m
[1m+++ b/TablitsaControls.cpp[m
[36m@@ -41,6 +41,7 @@[m [mvoid TablitsaVTabBox::SetActive(bool active)[m
   mActive = active;[m
   // Show/hide controls in this tab view[m
   GetUI()->ForControlInGroup(mGroupName.Get(), [active](IControl& control) {[m
[32m+[m[32m    if(control.IsHidden() == !active)[m
       control.Hide(!active);[m
     });[m
 }[m
[36m@@ -180,59 +181,6 @@[m [mPresetSelector::PresetSelector(const IRECT& bounds, IPopupMenuControl* menu, std[m
   mAllPresets.insert(mAllPresets.end(), mUserPresets.begin(), mUserPresets.end());[m
 }[m
 [m
[31m-[m
[31m-DropdownListControl::DropdownListControl(const IRECT& bounds, std::initializer_list<char*> options, const IText& text, const IColor& bgColor, bool showLabel) :[m
[31m-  ICaptionControl(bounds, kNoParameter, text, bgColor, showLabel)[m
[31m-{[m
[31m-  for (auto s : options)[m
[31m-  {[m
[31m-    mOptions.push_back(std::string(s));[m
[31m-  }[m
[31m-[m
[31m-  mPopupMenu.SetFunction([this](IPopupMenu* pControl) {[m
[31m-    mCurrentIdx = pControl->GetChosenItemIdx();[m
[31m-    });[m
[31m-}[m
[31m-[m
[31m-void DropdownListControl::Draw(IGraphics& g)[m
[31m-{[m
[31m-  mStr.Set(mOptions[0].c_str());[m
[31m-[m
[31m-  ITextControl::Draw(g);[m
[31m-[m
[31m-  if (mTri.W() > 0.f)[m
[31m-  {[m
[31m-    g.FillTriangle(mMouseIsOver ? mTriangleMouseOverColor : mTriangleColor, mTri.L, mTri.T, mTri.R, mTri.T, mTri.MW(), mTri.B, GetMouseIsOver() ? 0 : &BLEND_50);[m
[31m-  }[m
[31m-}[m
[31m-[m
[31m-void DropdownListControl::OnMouseDown(float x, float y, const IMouseMod& mod)[m
[31m-{[m
[31m-  mPopupMenu.Clear();[m
[31m-  int nDisplayTexts = mOptions.size();[m
[31m-  // Fill the menu[m
[31m-  for (int i = 0; i < nDisplayTexts; ++i)[m
[31m-  {[m
[31m-    const char* str = &mOptions[i].c_str()[0];[m
[31m-    // TODO: what if two parameters have the same text?[m
[31m-    if (!strcmp(str, mOptions[mCurrentIdx].c_str())) // strings are equal[m
[31m-      mPopupMenu.AddItem(new IPopupMenu::Item(str, IPopupMenu::Item::kChecked), -1);[m
[31m-    else // not equal[m
[31m-      mPopupMenu.AddItem(new IPopupMenu::Item(str), -1);[m
[31m-[m
[31m-    mPopupMenu.SetRootTitle(mOptions[mCurrentIdx].c_str());[m
[31m-  }[m
[31m-  mMenu->CreatePopupMenu(mPopupMenu, mRECT);[m
[31m-}[m
[31m-[m
[31m-void DropdownListControl::OnResize()[m
[31m-{[m
[31m-  if (mOptions.size() != 0)[m
[31m-  {[m
[31m-    mTri = mRECT.FracRectHorizontal(0.2f, true).GetCentredInside(IRECT(0, 0, 8, 5)); //TODO: This seems rubbish[m
[31m-  }[m
[31m-}[m
[31m-[m
 void PresetSelector::LoadUserPresets(std::initializer_list<char*> userPresets)[m
 {[m
   for (auto p : userPresets)[m
[1mdiff --git a/TablitsaControls.h b/TablitsaControls.h[m
[1mindex 69b9780..e0da518 100644[m
[1m--- a/TablitsaControls.h[m
[1m+++ b/TablitsaControls.h[m
[36m@@ -980,29 +980,7 @@[m [mpublic:[m
 [m
   /* DropdownList Control */[m
   int GetCurrentIndex() { return mCurrentIdx; }[m
[31m-  const char* GetSelectedString() { return mOptions[mCurrentIdx].c_str(); }[m
[31m-[m
[31m-  void AttachPopupMenu()[m
[31m-  {[m
[31m-    mMenu = new IPopupMenuControl();[m
[31m-    GetUI()->AttachControl(mMenu);[m
[31m-  }[m
[31m-[m
[31m-protected:[m
[31m-  std::vector<std::string> mOptions;[m
[31m-  IPopupMenu mPopupMenu;[m
[31m-  IPopupMenuControl* mMenu;[m
[31m-  int mCurrentIdx{ 0 };[m
[31m-};[m
[31m-[m
[31m-class DropdownListControl : public ICaptionControl[m
[31m-{[m
[31m-public:[m
[31m-  DropdownListControl(const IRECT& bounds, std::initializer_list<char*> options, const IText& text = TABLITSA_TEXT, const IColor& bgColor = DEFAULT_BGCOLOR, bool showLabel = false);[m
[31m-[m
[31m-  void Draw(IGraphics& g) override;[m
[31m-  void OnResize() override;[m
[31m-  void OnMouseDown(float x, float y, const IMouseMod& mod) override;[m
[32m+[m[32m  const char* GetSelectedGroupName() { return mOptions[mCurrentIdx].c_str(); }[m
 [m
   void AttachPopupMenu()[m
   {[m
[1mdiff --git a/Tablitsa_DSP.h b/Tablitsa_DSP.h[m
[1mindex 788ab88..f5b932d 100644[m
[1m--- a/Tablitsa_DSP.h[m
[1m+++ b/Tablitsa_DSP.h[m
[36m@@ -1876,28 +1876,25 @@[m [mpublic:[m
           });[m
         break;[m
       }[m
[31m-      case kParamEffect1Param5:[m
[32m+[m[32m      case kParamDelayTimeMode:[m
         mDelayEffect.SetTempoSync(value > 0.5);[m
         break;[m
[31m-      case kParamEffect1Param1:[m
[31m-      case kParamEffect1Param2:[m
[32m+[m[32m      case kParamDelayTimeLMilliseconds:[m
[32m+[m[32m      case kParamDelayTimeRMilliseconds:[m
[32m+[m[32m        mDelayEffect.SetDelayMS(value, paramIdx - kParamDelayTimeLMilliseconds);[m
[32m+[m[32m        break;[m
[32m+[m[32m      case kParamDelayTimeLBeats:[m
[32m+[m[32m      case kParamDelayTimeRBeats:[m
       {[m
[31m-        if (true)[m
[31m-        {[m
[31m-          mDelayEffect.SetDelayMS(value, paramIdx - kParamEffect1Param1);[m
[31m-        }[m
[31m-        else[m
[31m-        {[m
[31m-          double qnScalar = LFO<T>::GetQNScalar(static_cast<LFO<T>::ETempoDivision>(Clip((int)value, 0, (int)LFO<T>::ETempoDivision::kNumDivisions)));[m
[31m-          double qnPerMeasure = 4. / mTSDenom * mTSNum;[m
[31m-          mDelayEffect.SetDelayTempo(1. / qnScalar / qnPerMeasure, paramIdx - kParamEffect1Param1, mTempo);[m
[31m-        }[m
[32m+[m[32m        double qnScalar = LFO<T>::GetQNScalar(static_cast<LFO<T>::ETempoDivision>(Clip((int)value, 0, (int)LFO<T>::ETempoDivision::kNumDivisions)));[m
[32m+[m[32m        double qnPerMeasure = 4. / mTSDenom * mTSNum;[m
[32m+[m[32m        mDelayEffect.SetDelayTempo(1. / qnScalar / qnPerMeasure, paramIdx - kParamDelayTimeLBeats, mTempo);[m
         break;[m
       }[m
[31m-      case kParamEffect1Param3:[m
[32m+[m[32m      case kParamDelayFeedback:[m
         mDelayEffect.SetFeedback((T)value / 100.);[m
         break;[m
[31m-      case kParamEffect1Param4:[m
[32m+[m[32m      case kParamDelayMix:[m
         mDelayEffect.SetGain((T)value / 100.);[m
         break;[m
       default:[m
